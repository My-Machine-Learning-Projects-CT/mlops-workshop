AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Description: "Create a AWS CodePipeline to train a Machine Learning Model."

Parameters:

  RoleName:
    Type: String
    Description: "Name of the Pipeline execution Role."
    Default: MLOps

  ModelName:
    Type: String
    Description: "Name of the model"
    Default: abalone

  ImageTagName:
    Type: String
    Description: "Name of the model"
    Default: latest

  PipelineName:
    Type: String
    Description: "Name of pipeline"
    Default: mlops-devtools

Resources:

  ModelGroupLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
        - python3.8
      ContentUri: dependencies/
      Description: Lambda dependencies for Model Group
      LayerName: model-group-layer
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: makefile
  
  CreateModelGroup:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${PipelineName}-create-model-group-${ModelName}
      Description: "Function to create a SageMaker Model Package Group."
      Handler: lambda.handler
      MemorySize: 128
      Role: !GetAtt MLOpsRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          MODEL_NAME: !Ref ModelName
      CodeUri: ModelGroup/
      Layers:
        - !Ref ModelGroupLayer
      Tags:
        Name: !Sub ${PipelineName}

  PackageGroup:
    Type: Custom::PackageGroup
    Properties:
      ServiceToken: !GetAtt CreateModelGroup.Arn
    
  TrainingJobEvaluate:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: !Sub ${PipelineName}-training-job-evaluate-${ModelName}
      Description: "Function to start a new Sagemaker Processing Job to evaluate model"
      Handler: lambda.handler
      MemorySize: 128
      Role: !GetAtt MLOpsRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          PIPELINE_NAME: !Sub ${PipelineName}
          MODEL_NAME: !Ref ModelName
          PIPELINE_BUCKET: !ImportValue MLOpsBucket
      CodeUri: TrainingJobEvaluate/
      Tags:
        Name: !Sub ${PipelineName}

  TrainingLaunchJob:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: !Sub ${PipelineName}-training-launch-job-${ModelName}
      Description: "Function to start a new Sagemaker Training Job."
      Handler: lambda.handler
      MemorySize: 128
      Role: !GetAtt MLOpsRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          PIPELINE_NAME: !Sub ${PipelineName}
          MODEL_NAME: !Ref ModelName
          PIPELINE_BUCKET: !ImportValue MLOpsBucket
      CodeUri: TrainingLaunchJob/
      Tags:
        Name: !Sub ${PipelineName}
                                                                                                                                              
  EtlLaunchJob:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: !Sub ${PipelineName}-etl-launch-job-${ModelName}
      Description: "Function that will start a new Glue ETL Job."
      Handler: lambda.handler
      MemorySize: 128
      Role: !GetAtt MLOpsRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          PIPELINE_NAME: !Sub ${PipelineName}
          MODEL_NAME: !Ref ModelName
          DATA_BUCKET: !ImportValue DataBucket
          PIPELINE_BUCKET: !ImportValue MLOpsBucket
          ROLE: !GetAtt MLOpsRole.Arn
      CodeUri: EtlLaunchJob/
      Tags:
        Name: !Sub ${PipelineName}
  
  TrainingJobMonitor:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: !Sub ${PipelineName}-training-job-monitor-${ModelName}
      Description: "Function that will monitor that status of the SageMaker Training Job."
      Handler: lambda.handler
      MemorySize: 512
      Role: !GetAtt MLOpsRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          PIPELINE_NAME: !Sub ${PipelineName}
          MODEL_NAME: !Ref ModelName
      CodeUri: TrainingJobMonitor/
      Tags:
        Name: !Sub ${PipelineName}

  TrainingModelApproval:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: !Sub ${PipelineName}-training-model-approval-${ModelName}
      Description: "Function that will evaluate the trained bodel with baseline"
      Handler: lambda.handler
      MemorySize: 512
      Role: !GetAtt MLOpsRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          PIPELINE_NAME: !Sub ${PipelineName}
          MODEL_NAME: !Ref ModelName
          MODEL_BASELINE_QUALITY_THRESHOLD: 3.1
      CodeUri: TrainingModelApproval/
      Tags:
        Name: !Sub ${PipelineName}
        
  EtlJobMonitor:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: !Sub ${PipelineName}-etl-job-monitor-${ModelName}
      Description: "Function that will monitor that status of the Glue ETL Job."
      Handler: lambda.handler
      MemorySize: 512
      Role: !GetAtt MLOpsRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          PIPELINE_NAME: !Sub ${PipelineName}
          MODEL_NAME: !Ref ModelName
      CodeUri: EtlJobMonitor/
      Tags:
        Name: !Sub ${PipelineName}
  
  TrainingJobMonitorPermissions:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${PipelineName}-training-job-monitor-${ModelName}
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TrainingJobMonitoringEvent.Arn
    DependsOn: TrainingJobMonitor

  TrainingModelApprovalPermissions:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${PipelineName}-training-model-approval-${ModelName}
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TrainingModelApprovalEvent.Arn
    DependsOn: TrainingModelApproval
    
  EtlJobMonitorPermissions:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${PipelineName}-etl-job-monitor-${ModelName}
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EtlJobMonitoringEvent.Arn
    DependsOn: EtlJobMonitor
  
  TrainingJobMonitoringEvent:
    Type: AWS::Events::Rule
    Properties: 
      Description: "Event that will monitor the training job and inform codepipeline as it finishes."
      Name: !Sub training-job-monitor-${ModelName}
      ScheduleExpression: cron(0/1 * * * ? *)
      State: DISABLED
      Targets:
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${PipelineName}-training-job-monitor-${ModelName}
          Id: !Sub ${PipelineName}-training-event-${ModelName}
    DependsOn: TrainingJobMonitor
    
  TrainingModelApprovalEvent:
    Type: AWS::Events::Rule
    Properties: 
      Description: "Event that will monitor the processing job, evaluate and inform codepipeline as it finishes."
      Name: !Sub training-model-approval-${ModelName}
      ScheduleExpression: cron(0/1 * * * ? *)
      State: DISABLED
      Targets:
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${PipelineName}-training-model-approval-${ModelName}
          Id: !Sub ${PipelineName}-training-approval-event-${ModelName}
    DependsOn: TrainingModelApproval
 
  EtlJobMonitoringEvent:
    Type: AWS::Events::Rule
    Properties: 
      Description: "Event that will monitor the gluejob and inform codepipeline as it finishes."
      Name: !Sub etl-job-monitor-${ModelName}
      ScheduleExpression: cron(0/1 * * * ? *)
      State: DISABLED
      Targets:
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${PipelineName}-etl-job-monitor-${ModelName}
          Id: !Sub ${PipelineName}-etl-event-${ModelName}
    DependsOn: EtlJobMonitor

  BuildImageProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${PipelineName}-buildimage-${ModelName}
      Description: "Build the Model Training and Inference Image."
      ServiceRole: !GetAtt MLOpsRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          Version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.8
            pre_build:
              commands:
                - printenv
                - echo Updating Packages ...
                - pip install --upgrade --force-reinstall botocore boto3 awscli
            build:
              Commands:
                - echo Build started on `date`
                - echo Logging in to the Amazon Deep Learning Contain Repository ...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin 763104351884.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                - echo Building the Container image...
                - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
            post_build:
              commands:
                - echo Logging in to ECR Repository...
                - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
                - echo Pushing the Container image...
                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
              finally:
                - echo Build completed on `date`
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: IMAGE_REPO_NAME
            Value: !ImportValue ContainerRegistryName
          - Name: IMAGE_TAG
            Value: !Ref ImageTagName
          - Name: AWS_ACCOUNT_ID
            Value: !Sub ${AWS::AccountId}
          - Name: AWS_DEFAULT_REGION
            Value: !Sub ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub ${PipelineName}

  BuildLambdaImageProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${PipelineName}-build-lambda-image-${ModelName}
      Description: "Build a Lambda Container to test dev endpoint"
      ServiceRole: !GetAtt MLOpsRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          Version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.8
            pre_build:
              commands:
                - printenv
                - echo Updating Packages ...
                - pip install --upgrade --force-reinstall botocore boto3 awscli sagemaker aws-sam-cli
                - |
                  sh -c """
                    sam build --build-dir deploy/ \
                              --use-container \
                              --manifest requirements.txt \
                              --template-file ./assets/testDevEndpoint/sam.yaml \
                              --base-dir assets/
                    """
            build:
              Commands:
                - echo Build started on `date`
                - |
                  sh -c """
                  sam deploy  --stack-name ${STACK_NAME} \
                              --template-file deploy/template.yaml \
                              --capabilities CAPABILITY_NAMED_IAM \
                              --image-repository ${CONTAINER_REGISTRY_URI} \
                              --s3-bucket ${PIPELINE_BUCKET} \
                              --s3-prefix ${PIPELINE_NAME}/artifacts \
                              --no-fail-on-empty-changeset \
                              --no-confirm-changeset
                  """
            post_build:
              commands:
                - echo Build completed on `date`
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: IMAGE_REPO_NAME
            Value: !ImportValue AbaloneLambdaRegistryName
          - Name: IMAGE_TAG
            Value: !Ref ImageTagName
          - Name: AWS_ACCOUNT_ID
            Value: !Sub ${AWS::AccountId}
          - Name: AWS_DEFAULT_REGION
            Value: !Sub ${AWS::Region}
          - Name: MODEL_NAME
            Value: !Ref ModelName
          - Name: PIPELINE_BUCKET
            Value: !ImportValue MLOpsBucket
          - Name: STACK_NAME
            Value: !Sub ${AWS::StackName}-test-endpoint
          - Name: PIPELINE_NAME
            Value: !Sub ${PipelineName}
          - Name: CONTAINER_REGISTRY_URI
            Value: !ImportValue AbaloneLambdaRegistryURI
      Tags:
        - Key: Name
          Value: !Sub ${PipelineName}

  BuildDeploymentProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${PipelineName}-build-deployment-${ModelName}
      Description: "Builds the required resource properties for the deployment."
      ServiceRole: !GetAtt MLOpsRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL 
        Image: aws/codebuild/standard:4.0
        EnvironmentVariables:
          - Name: PIPELINE_NAME
            Value: !Sub ${PipelineName}
          - Name: IMAGE_REPO_NAME
            Value: !ImportValue ContainerRegistryName
          - Name: MODEL_NAME
            Value: !Ref ModelName
          - Name: IMAGE_TAG
            Value: !Ref ImageTagName
          - Name: MODEL_GROUP
            Value: !GetAtt PackageGroup.Name
          - Name: CONTAINER_REGISTRY_URI
            Value: !ImportValue ContainerRegistryURI
          - Name: PIPELINE_BUCKET
            Value: !ImportValue MLOpsBucket
      Tags:
        - Key: Name
          Value: !Sub ${PipelineName}

  BuildTrainPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${PipelineName}
      RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${RoleName}
      ArtifactStore:
        Type: S3
        Location: !ImportValue MLOpsBucket
      Stages:
        - Name: Source
          Actions: 
            - Name: ModelSource
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeCommit
              OutputArtifacts: 
                - Name: ModelSourceOutput
              Configuration:
                BranchName: main
                RepositoryName: !ImportValue MLOpsRepoName
                PollForSourceChanges: false
              RunOrder: 1
            - Name: ETLSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeCommit
              OutputArtifacts:
                - Name: EtlSourceOutput
              Configuration:
                BranchName: etl
                RepositoryName: !ImportValue MLOpsRepoName
                PollForSourceChanges: false
              RunOrder: 1
            - Name: DataSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: S3
              OutputArtifacts:
                - Name: DataSourceOutput
              Configuration:
                S3Bucket: !ImportValue DataBucket
                S3ObjectKey: input/raw/abalone.csv
                PollForSourceChanges: false
              RunOrder: 1
            - Name: TestSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeCommit
              OutputArtifacts:
                - Name: TestSourceOutput
              Configuration:
                BranchName: test
                RepositoryName: !ImportValue MLOpsRepoName
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildImage
              InputArtifacts:
               - Name: ModelSourceOutput
              OutputArtifacts:
                - Name: BuildImageOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildImageProject
              RunOrder: 1
            - Name: BuildLambdaImage
              InputArtifacts:
               - Name: TestSourceOutput
              OutputArtifacts:
                - Name: BuildLambdaImageOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildLambdaImageProject
              RunOrder: 1
        - Name: ETL
          Actions:
            - Name: GlueJob
              InputArtifacts:
                - Name: EtlSourceOutput
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: "1"
                Provider: Lambda
              Configuration:
                FunctionName: !Ref EtlLaunchJob
              RunOrder: 1
            - Name: ApproveETL
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: "1"
                Provider: Manual
              Configuration:
                CustomData: 'Did the Glue ETL Job run successfully?'
              RunOrder: 2
        - Name: Train
          Actions:
            - Name: TrainModel
              InputArtifacts:
                - Name: ModelSourceOutput
              OutputArtifacts:
                - Name: ModelTrainOutput
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: "1"
                Provider: Lambda
              Configuration:
                FunctionName: !Ref TrainingLaunchJob
                UserParameters: !Sub mlops-pipeline-${ModelName}
              RunOrder: 1
            - Name: ApproveTrain
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: "1"
                Provider: Manual
              Configuration:
                CustomData: 'Was this model trained successfully?'
              RunOrder: 2
        - Name: Evaluate
          Actions:
            - Name: EvaluateModel
              InputArtifacts:
                - Name: ModelSourceOutput
              OutputArtifacts:
                - Name: ModelEvaluateOutput
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: "1"
                Provider: Lambda
              Configuration:
                FunctionName: !Ref TrainingJobEvaluate
                UserParameters: !Sub mlops-pipeline-${ModelName}
              RunOrder: 1
            - Name: ApproveModel
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: "1"
                Provider: Manual
              Configuration:
                CustomData: 'Does model meet baseline?'
              RunOrder: 2
        - Name: DeployDev
          Actions:
            - Name: BuildDevDeployment
              InputArtifacts:
                - Name: ModelSourceOutput
              OutputArtifacts:
                - Name: BuildDevOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref BuildDeploymentProject
                EnvironmentVariables: '[{"name":"STAGE","value":"Dev","type":"PLAINTEXT"}]'
              RunOrder: 1
            - Name: DeployDevModel
              InputArtifacts:
                - Name: BuildDevOutput
              OutputArtifacts:
                - Name: DeployDevOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${RoleName}
                Capabilities: CAPABILITY_NAMED_IAM
                StackName: !Sub ${AWS::StackName}-dev
                TemplateConfiguration: BuildDevOutput::Dev-config-export.json
                TemplatePath: BuildDevOutput::deploy-model-Dev.yaml
              RunOrder: 2
            - Name: InvokeEndPoint
              InputArtifacts: []
              OutputArtifacts: []
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: "1"
                Provider: Lambda
              Configuration:
                FunctionName: !Sub ${PipelineName}-test-dev-endpoint-${ModelName}
                UserParameters: !Sub mlops-pipeline-${ModelName}
              RunOrder: 3

  MLOpsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref RoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "s3.amazonaws.com"
                - "cloudformation.amazonaws.com"
                - "events.amazonaws.com"
                - "glue.amazonaws.com"
                - "lambda.amazonaws.com"
                - "sagemaker.amazonaws.com"
                - "codebuild.amazonaws.com"
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "AWSDevToolsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "CodeCommitAccess"
                Effect: "Allow"
                Action:
                  - "codecommit:GetBranch"
                  - "codecommit:GetCommit"
                  - "codecommit:UploadArchive"
                  - "codecommit:GetUploadArchiveStatus"
                  - "codecommit:CancelUploadArchive"
                Resource:
                  - !ImportValue MLOpsRepoArn
                Condition:
                  StringEquals:
                    aws:RequestedRegion: !Sub ${AWS::Region}
              - Sid: "UploadImage"
                Effect: "Allow"
                Action: "ecr:*"
                Resource: "*"
                Condition:
                  StringEquals:
                    aws:RequestedRegion: !Sub ${AWS::Region}
              - Sid: "ECRAuthorizationToken"
                Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                Resource: "*"
              - Sid: "CloudWatchMetrics"
                Effect: "Allow"
                Action:
                  - "cloudwatch:PutMetricData"
                  - "cloudwatch:GetMetricData"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:ListMetrics"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DeleteAlarms"
                  - "cloudwatch:DescribeAlarms"
                Resource: "*"
              - Sid: "CloudWatchLogs"
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:DescribeLogStreams"
                  - "logs:PutLogEvents"
                  - "logs:GetLogEvents"
                Resource: "*"
              - Sid: "BucketAccess"
                Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - "arn:aws:s3:::data-*"
                  - "arn:aws:s3:::data-*/*"
                  - "arn:aws:s3:::mlops-*"
                  - "arn:aws:s3:::mlops-*/*"                
                Condition:
                  StringEquals:
                    aws:RequestedRegion: !Sub ${AWS::Region}
              - Sid: "CloudWatchEventsAccess"
                Effect: "Allow"
                Action:
                  - "events:*"
                Resource: "*"
              - Sid: "CloudFormationAccess"
                Effect: "Allow"
                Action:
                  - "cloudformation:Create*"
                  - "cloudformation:Delete*"
                  - "cloudformation:Describe*"
                  - "cloudformation:Update*"
                  - "cloudformation:List*"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:GetTemplateSummary"
                Resource:
                  - "arn:aws:cloudformation:*:*:stack/*"
                  - "arn:aws:cloudformation:*:aws:transform/Serverless-2016-10-31"
                Condition:
                  StringEquals:
                    aws:RequestedRegion: !Sub ${AWS::Region}
              - Sid: "CodeBuildImageAccess"
                Effect: "Allow"
                Action:
                  - "codebuild:*"
                Resource:
                  - !Sub "arn:aws:codebuild:*:*:project/${PipelineName}-buildimage-${ModelName}"
                  - !Sub "arn:aws:codebuild:*:*:project/${PipelineName}-build-deployment-${ModelName}"
                  - !Sub "arn:aws:codebuild:*:*:project/${PipelineName}-build-lambda-image-${ModelName}"
                Condition:
                  StringEquals:
                    aws:RequestedRegion: !Sub ${AWS::Region}
              - Sid: "GlueJobResourceAccess"
                Effect: "Allow"
                Action:
                - "glue:*"
                Resource:
                - "arn:aws:glue:*:*:job/*"
                Condition:
                  StringEquals:
                    aws:RequestedRegion: !Sub ${AWS::Region}
              - Sid: "LambdaResourceAccess"
                Effect: "Allow"
                Action:
                - "lambda:*"
                Resource:
                  - !Sub "arn:aws:lambda:*:*:function:${PipelineName}-training-launch-job-${ModelName}"
                  - !Sub "arn:aws:lambda:*:*:function:${PipelineName}-training-job-monitor-${ModelName}"
                  - !Sub "arn:aws:lambda:*:*:function:${PipelineName}-etl-launch-job-${ModelName}"
                  - !Sub "arn:aws:lambda:*:*:function:${PipelineName}-etl-job-monitor-${ModelName}"
                  - !Sub "arn:aws:lambda:*:*:function:${PipelineName}-training-job-evaluate-${ModelName}"
                  - !Sub "arn:aws:lambda:*:*:function:${PipelineName}-training-model-approval-${ModelName}"
                  - !Sub "arn:aws:lambda:*:*:function:${PipelineName}-test-dev-endpoint-${ModelName}"
                Condition:
                  StringEquals:
                    aws:RequestedRegion: !Sub ${AWS::Region}
              - Sid: "SageMakerFullAccess"
                Effect: "Allow"
                Action:
                  - "sagemaker:*"
                Resource: "*"
              - Sid: "CodePipelineAccess"
                Action:
                  - "codepipeline:PutJobFailureResult"
                  - "codepipeline:PutJobSuccessResult"
                  - "codepipeline:GetPipelineState"
                  - "codepipeline:PutApprovalResult"
                Effect: "Allow"
                Resource: "*"
              - Sid: "MLOpsPassRole"
                Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource:
                  - !Sub "arn:aws:iam::*:role/${RoleName}"

Outputs:
  ModelName:
    Description: Name of the model
    Value: !Ref ModelName
    Export:
      Name: ModelName

  PipelineName:
    Description: Name of MLOps pipeline
    Value: !Ref PipelineName
    Export:
      Name: MLOpsPipelineName
      
  RoleName:
    Description: Name of Model-Build Pipeline execution role
    Value: !Ref RoleName
    Export:
      Name: MLOpsRoleName
  
  RoleNameArn:
    Description: Name of Model-Build Pipeline execution role
    Value: !GetAtt MLOpsRole.Arn
    Export:
      Name: MLOpsRoleNameArn
  